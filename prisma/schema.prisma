generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdminUser {
  uid         String       @id @default(uuid())
  firstname   String
  lastname    String
  phoneNumber String
  password    String
  address     String
  platform    String?      @default("portal")
  accessLevel String?      @default("regular")
  expire      String?      @default("none")
  areaAccess  Int[]
  DeviceLogs  DeviceLogs[]
  Survey      Survey[]
}

model Users {
  uid                  String                 @id @default(uuid())
  username             String
  password             String
  role                 Int                    @default(2)
  purpose              Int                    @default(1234)
  status               Int                    @default(1)
  timstamp             DateTime               @default(now())
  privilege            Int[]                  @default([1, 2, 3, 4, 5, 6, 7, 8, 9])
  activityLogs         UserActivityLogs[]
  validatedTeam        ValidatedTeams[]
  SurveyResponse       SurveyResponse[]
  respondentResponse   RespondentResponse[]
  DeviceLogs           DeviceLogs[]
  qrCode               UserQRCode?            @relation(fields: [userQRCodeId], references: [id], onDelete: Cascade)
  userQRCodeId         String?                @unique
  notificationsSent    Notification[]         @relation("SenderRelation")
  notificationsTarget  Notification[]         @relation("TargetRelation")
  TeamDistributions    TeamDistributions[]
  TeamLeaderAttendance TeamLeaderAttendance[]
  VoterRecords         VoterRecords[]
  TeamRecords          TeamRecords[]
}

model UserQRCode {
  id     String @id @default(uuid())
  qrCode String
  Users  Users?
}

model Notification {
  uid       String   @id @default(uuid())
  fromUid   String
  from      Users    @relation("SenderRelation", fields: [fromUid], references: [uid], onDelete: Cascade)
  targetUid String
  target    Users    @relation("TargetRelation", fields: [targetUid], references: [uid])
  viewed    Boolean  @default(false)
  path      String?
  title     String
  message   String
  timestamp DateTime @default(now())
}

model UserActivityLogs {
  id        String   @id @default(uuid())
  activity  String?  @default("None")
  timestamp DateTime @default(now())
  Users     Users?   @relation(fields: [usersUid], references: [uid], onDelete: Cascade)
  usersUid  String?
}

model Position {
  id         String       @id @default(uuid())
  title      String
  Candidates Candidates[]
}

model Validation {
  id           String     @id @default(uuid())
  timestamp    DateTime   @default(now())
  municiapal   Municipals @relation(fields: [municipalsId], references: [id])
  percent      Float
  totalVoters  Int
  municipalsId Int
  barangay     Barangays  @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId  String
}

model Candidates {
  id               String         @id @default(uuid())
  lastname         String
  firstname        String
  position         Position?      @relation(fields: [positionId], references: [id])
  code             String?
  colorCode        String?        @default("#ffffff")
  desc             String?
  image            MediaUrl?      @relation(fields: [mediaUrlId], references: [id])
  supporters       Voters[]
  candidateBatchId String
  BarangayCoor     BarangayCoor[]
  PurokCoor        PurokCoor[]
  TeamLeader       TeamLeader[]
  mediaUrlId       String?
  positionId       String?
  Team             Team[]
}

model CandidateBatch {
  id        String   @id @default(uuid())
  timestamp DateTime @default(now())
  waveID    Wave     @relation(fields: [waveId], references: [id], onDelete: Cascade)
  waveId    Int
}

model Wave {
  id             Int              @id @default(autoincrement())
  timestamp      DateTime         @default(now())
  CandidateBatch CandidateBatch[]
}

model Voters {
  id                   String                 @id @default(uuid())
  idNumber             String?                @default("none")
  lastname             String
  firstname            String
  gender               String?                @default("Unknown")
  barangay             Barangays              @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  municipal            Municipals             @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  precent              Precents?              @relation(fields: [precintsId], references: [id], onDelete: Cascade)
  status               Int                    @default(1)
  calcAge              Int
  birthYear            String
  level                Int                    @default(0)
  barangaysId          String
  municipalsId         Int
  precintsId           String?
  batchDraft           NewBatchDraft?         @relation(fields: [newBatchDraftId], references: [id], onDelete: Cascade)
  saveStatus           String                 @default("drafted")
  mobileNumber         String?                @default("Unknown")
  houseHold            HouseHold?             @relation(fields: [houseHoldId], references: [id])
  houseHoldId          String?
  newBatchDraftId      String?
  purok                Purok?                 @relation(fields: [purokId], references: [id], onDelete: Cascade)
  purokId              String?
  hubID                Hub?                   @relation(fields: [hubId], references: [id])
  BarangayCoor         BarangayCoor[]
  PurokCoor            PurokCoor[]
  pwd                  String?
  oor                  String?
  inc                  String?
  illi                 String?
  inPurok              Boolean?
  senior               Boolean?
  youth                Boolean?
  hubId                String?
  qrCode               String?                @default("None")
  Candidates           Candidates?            @relation(fields: [candidatesId], references: [id])
  candidatesId         String?
  WhiteList            BlackList[]
  QRcode               QRcode[]
  qrCodeNumber         Int?                   @default(0)
  Team                 Team?                  @relation(fields: [teamId], references: [id])
  teamId               String?
  TeamLeader           TeamLeader[]
  ValidatedTeamMembers ValidatedTeamMembers[]
  VoterRecords         VoterRecords[]
  witnessId            String?
  Witness              Witness?
}

model Purok {
  id                   String                 @id @default(cuid())
  purokNumber          String
  barangaysId          String
  barangay             Barangays              @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  municipalsId         Int
  municipal            Municipals             @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  houseHolds           HouseHold[]
  voters               Voters[]
  draftID              String
  TeamLeaderBridge     Team[]
  PurokCoor            PurokCoor[]
  TeamLeader           TeamLeader[]
  ValidatedTeamMembers ValidatedTeamMembers[]
  ValidatedTeams       ValidatedTeams[]
}

model Municipals {
  id                   Int                    @id
  name                 String
  barangays            Barangays[]
  voters               Voters[]
  Precents             Precents[]
  NewBatchDraft        NewBatchDraft[]
  Purok                Purok[]
  HouseHold            HouseHold[]
  Hub                  Hub[]
  PurokCoor            PurokCoor[]
  BarangayCoor         BarangayCoor[]
  SurveyResponse       SurveyResponse[]
  Response             Response[]
  RespondentResponse   RespondentResponse[]
  TeamLeader           TeamLeader[]
  WhiteList            BlackList[]
  TeamLeaderBridge     Team[]
  Validated            Validation[]
  ValidatedTeams       ValidatedTeams[]
  ValidatedTeamMembers ValidatedTeamMembers[]
  TeamRecordsLogs      TeamRecordsLogs[]
}

model Barangays {
  id                   String                 @id @default(uuid())
  number               Int                    @default(autoincrement())
  name                 String
  municipal            Municipals             @relation(fields: [municipalId], references: [id], onDelete: Cascade)
  municipalId          Int
  voters               Voters[]
  precents             Precents[]
  NewBatchDraft        NewBatchDraft[]
  Purok                Purok[]
  HouseHold            HouseHold[]
  Hub                  Hub[]
  PurokCoor            PurokCoor[]
  BarangayCoor         BarangayCoor[]
  Response             Response[]
  SurveyResponse       SurveyResponse[]
  population           Int?                   @default(0)
  sampleSize           Int?                   @default(0)
  sampleRate           Int?                   @default(10)
  surveyor             Int?                   @default(0)
  femaleSize           Int?                   @default(0)
  maleSize             Int?                   @default(0)
  activeSurveyor       Int?                   @default(0)
  RespondentResponse   RespondentResponse[]
  Quota                Quota[]
  TeamLeader           TeamLeader[]
  WhiteList            BlackList[]
  TeamLeaderBridge     Team[]
  Validated            Validation[]
  ValidatedTeams       ValidatedTeams[]
  ValidatedTeamMembers ValidatedTeamMembers[]
  TeamRecordsLogs      TeamRecordsLogs[]
}

model HouseHold {
  id              String     @id
  houseHoldNumber String
  barangayId      Barangays  @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId     String
  municipalId     Municipals @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId    Int
  Voters          Voters[]
  purokID         Purok?     @relation(fields: [purokId], references: [id], onDelete: Cascade)
  purokId         String?
}

model Hub {
  id           String     @id @default(cuid())
  info         String
  barangayID   Barangays  @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId  String
  municipalId  Municipals @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId Int
  teamLeader   TeamLeader @relation(fields: [teamLeaderId], references: [id])
  teamLeaderId String
  Voters       Voters[]
  Team         Team[]
}

model Precents {
  id            String     @id
  precintNumber String
  barangay      Barangays  @relation(fields: [barangayId], references: [id], onDelete: Cascade)
  barangayId    String
  municipal     Municipals @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  Voters        Voters[]
  municipalsId  Int
}

model NewBatchDraft {
  id          String      @id @default(uuid())
  Municipals  Municipals? @relation(fields: [municipalId], references: [id], onDelete: Cascade)
  municipalId Int?
  barangay    Barangays   @relation(fields: [barangayId], references: [id], onDelete: Cascade)
  barangayId  String
  timestamp   DateTime    @default(now())
  drafted     Boolean?    @default(true)
  Voters      Voters[]
}

model CutstomList {
  id          String   @id @default(uuid())
  name        String
  wave        String
  municipalId Int
  barangayId  String
  timestamp   DateTime @default(now())
}

model Team {
  id                String              @id @default(uuid())
  voters            Voters[]
  purok             Purok?              @relation(fields: [purokId], references: [id], onDelete: Cascade)
  purokId           String?
  barangay          Barangays           @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId       String
  municipal         Municipals          @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId      Int
  hub               Hub?                @relation(fields: [hubId], references: [id])
  hubId             String?
  level             Int                 @default(1)
  TeamLeader        TeamLeader?         @relation(fields: [teamLeaderId], references: [id], onDelete: SetNull)
  teamLeaderId      String?
  candidate         Candidates?         @relation(fields: [candidatesId], references: [id])
  candidatesId      String?
  TeamRecordsLogs   TeamRecordsLogs[]
  TeamRecords       TeamRecords[]
  TeamDistributions TeamDistributions[]
}

model TeamLeader {
  id                   String                 @id @default(cuid())
  voter                Voters?                @relation(fields: [votersId], references: [id])
  hubId                String
  municipal            Municipals             @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  barangay             Barangays              @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  purokCoor            PurokCoor?             @relation(fields: [purokCoorId], references: [id])
  purokCoorId          String?
  purok                Purok                  @relation(fields: [purokId], references: [id])
  voterId              String?
  Hub                  Hub[]
  municipalsId         Int
  barangaysId          String
  team                 Team[]
  teamId               String?                @default("None")
  votersId             String?
  purokId              String
  handle               Int?                   @default(0)
  level                Int                    @default(1)
  candidate            Candidates?            @relation(fields: [candidatesId], references: [id])
  candidatesId         String?
  ValidatedTeams       ValidatedTeams[]
  ValidatedTeamMembers ValidatedTeamMembers[]
  qrCode               TeamlLeaderQRcodes?    @relation(fields: [teamlLeaderQRcodesId], references: [id], onDelete: Cascade)
  teamlLeaderQRcodesId String?                @unique
  barangayCoorId       String?
  barangayCoor         TeamLeader?            @relation("BarangayCoor", fields: [barangayCoorId], references: [id])
  barangayCoorFor      TeamLeader[]           @relation("BarangayCoor")

  purokCoorsId String?
  purokCoors   TeamLeader?  @relation("PurokCoors", fields: [purokCoorsId], references: [id])
  purokCoorFor TeamLeader[] @relation("PurokCoors")

  teamLeaderId         String?
  teamLeader           TeamLeader?            @relation("TeamLeader", fields: [teamLeaderId], references: [id])
  teamLeaderFor        TeamLeader[]           @relation("TeamLeader")
  TeamLeaderAttendance TeamLeaderAttendance[]
}

model TeamlLeaderQRcodes {
  id         String      @id @default(uuid())
  qrCode     String
  TeamLeader TeamLeader?
}

model TeamLeaderAttendance {
  id           String     @id @default(uuid())
  for          Int        @default(1)
  teamLeader   TeamLeader @relation(fields: [teamLeaderId], references: [id])
  teamLeaderId String
  date         DateTime
  status       String
  user         Users?     @relation(fields: [usersUid], references: [uid])
  usersUid     String?
}

model ValidatedTeams {
  id                   String                 @id @default(uuid())
  teamLeader           TeamLeader?            @relation(fields: [teamLeaderId], references: [id], onDelete: SetNull)
  teamLeaderId         String?
  barangay             Barangays              @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId          String
  municipal            Municipals             @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId         Int
  purok                Purok?                 @relation(fields: [purokId], references: [id], onDelete: Cascade)
  validatedTeamMembers ValidatedTeamMembers[]
  timestamp            DateTime               @default(now())
  purokId              String?
  issues               Int?                   @default(0)
  Users                Users?                 @relation(fields: [usersUid], references: [uid])
  usersUid             String?
}

model ValidatedTeamMembers {
  id               String          @id @default(uuid())
  idNumber         String
  voter            Voters?         @relation(fields: [votersId], references: [id], onDelete: SetNull)
  votersId         String?
  barangay         Barangays?      @relation(fields: [barangayId], references: [id], onDelete: Cascade)
  barangayId       String
  municipal        Municipals?     @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId     Int?
  purok            Purok?          @relation(fields: [purokId], references: [id])
  purokId          String
  teamLeader       TeamLeader?     @relation(fields: [teamLeaderId], references: [id], onDelete: SetNull)
  teamLeaderId     String?
  ValidatedTeams   ValidatedTeams? @relation(fields: [validatedTeamsId], references: [id], onDelete: Cascade)
  validatedTeamsId String?
  remark           String?         @default("OK")
}

model PurokCoor {
  id             String        @id @default(cuid())
  voter          Voters        @relation(fields: [votersId], references: [id], onDelete: Cascade)
  municipalId    Municipals    @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId   Int
  barangayId     Barangays     @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  purok          Purok         @relation(fields: [purokId], references: [id])
  barangaysId    String
  TeamLeader     TeamLeader[]
  barangayCoor   BarangayCoor? @relation(fields: [barangayCoorId], references: [id])
  barangayCoorId String?
  votersId       String
  handle         Int           @default(0)
  purokId        String
  candidate      Candidates?   @relation(fields: [candidatesId], references: [id])
  candidatesId   String?
}

model BlackList {
  id           String     @id @default(uuid())
  voter        Voters     @relation(fields: [votersId], references: [id])
  timestamp    DateTime   @default(now())
  municipal    Municipals @relation(fields: [municipalsId], references: [id])
  municipalsId Int
  barangay     Barangays  @relation(fields: [barangaysId], references: [id])
  barangaysId  String
  votersId     String
}

model BarangayCoor {
  id           String      @id @default(cuid())
  voter        Voters      @relation(fields: [votersId], references: [id], onDelete: Cascade)
  purokCoor    PurokCoor[]
  municipalID  Municipals  @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId Int
  barangayID   Barangays   @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId  String
  votersId     String
  candidate    Candidates? @relation(fields: [candidatesId], references: [id])
  candidatesId String?
}

model QRcode {
  id              String   @id @default(uuid())
  number          Int      @default(autoincrement())
  voterNumber     String?
  qrCode          String
  timestamp       DateTime @default(now())
  voter           Voters   @relation(fields: [votersId], references: [id], onDelete: Cascade)
  votersId        String
  stamp           Int
  scannedDateTime String?  @default("N/A")
}

model SurveyorNumber {
  id                String              @id @default(uuid())
  username          String
  password          String
  role              Int
  ValidatedResponse ValidatedResponse[]
}

model Survey {
  id                 String               @id @default(cuid())
  tagID              String
  name               String               @default("Title_")
  timestamp          DateTime             @default(now())
  type               String
  queries            Queries[]
  drafted            Boolean?             @default(true)
  status             String?              @default("Ongoing")
  createdBy          AdminUser            @relation(fields: [adminUserUid], references: [uid], onDelete: Cascade)
  images             MediaUrl[]
  adminUserUid       String
  DeviceLogs         DeviceLogs[]
  Response           Response[]
  RespondentResponse RespondentResponse[]
  SurveyResponse     SurveyResponse[]
  ValidatedResponse  ValidatedResponse[]
}

model SampleSize {
  id   String @id @default(cuid())
  size Int
  rate Int
}

model DefaultQuery {
  id        String @id @default(cuid())
  queriesId String
}

model AgeBracket {
  id                 String               @id @default(cuid())
  segment            String
  order              Int                  @default(autoincrement())
  Response           Response[]
  RespondentResponse RespondentResponse[]
  Quota              Quota[]
}

model Gender {
  id                 String               @id @default(cuid())
  name               String
  Response           Response[]
  RespondentResponse RespondentResponse[]
  GenderSize         GenderSize[]
  GenderTotal        GenderTotal[]
}

model GenderTotal {
  id       String @id @default(cuid())
  total    Int?   @default(0)
  gender   Gender @relation(fields: [genderId], references: [id], onDelete: Cascade)
  genderId String
}

model GenderSize {
  id       String  @id @default(cuid())
  gender   Gender  @relation(fields: [genderId], references: [id], onDelete: Cascade)
  genderId String
  size     Int
  Quota    Quota?  @relation(fields: [quotaId], references: [id], onDelete: Cascade)
  quotaId  String?
}

model Quota {
  id             String       @id @default(uuid())
  barangay       Barangays    @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId    String
  gendersSize    GenderSize[]
  age            AgeBracket   @relation(fields: [ageBracketId], references: [id], onDelete: Cascade)
  activeSurveyor Int?         @default(0)
  ageBracketId   String
}

model Queries {
  id               String         @id @default(uuid())
  order            Int            @default(autoincrement())
  queries          String
  survey           Survey         @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId         String
  type             String?        @default("single")
  componentType    String?        @default("regular")
  responseType     String?        @default("multiple")
  style            Int?           @default(1)
  selectionType    String?        @default("select")
  access           String?        @default("regular")
  withCustomOption Boolean?       @default(false)
  Response         Response[]
  Option           Option[]
  customOption     CustomOption[]
  QueryAnswer      QueryAnswer[]
  onTop            Boolean?       @default(false)
}

model CustomOption {
  id                   String              @id @default(cuid())
  value                String
  Queries              Queries?            @relation(fields: [queriesId], references: [id])
  queriesId            String?
  QueryAnswer          QueryAnswer[]
  RespondentResponse   RespondentResponse? @relation(fields: [respondentResponseId], references: [id])
  respondentResponseId String?
  Response             Response[]
}

model Option {
  id           String        @id @default(cuid())
  order        Int           @default(autoincrement())
  title        String?
  desc         String?
  mediaUrlId   String?
  queries      Queries       @relation(fields: [queryId], references: [id], onDelete: Cascade)
  queryId      String
  onExit       Boolean       @default(false)
  onTop        Boolean?      @default(false)
  inlcuded     Boolean?      @default(false)
  forAll       Boolean?      @default(false)
  customizable Boolean?      @default(false)
  Response     Response[]
  MediaUrl     MediaUrl[]
  QueryAnswer  QueryAnswer[]
}

model MediaUrl {
  id                 String               @id @default(uuid())
  url                String
  filename           String?
  size               String
  option             Option?              @relation(fields: [optionId], references: [id], onDelete: Cascade)
  Survey             Survey?              @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId           String?
  optionId           String?
  Candidates         Candidates[]
  RespondentResponse RespondentResponse[]
}

model SurveyResponse {
  id                 String               @id
  timestamp          DateTime             @default(now())
  municipal          Municipals           @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId       Int
  barangay           Barangays            @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId        String
  survey             Survey               @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  Users              Users?               @relation(fields: [usersUid], references: [uid], onDelete: Cascade)
  usersUid           String?
  surveyId           String
  RespondentResponse RespondentResponse[]
  Response           Response[]
}

model RespondentResponse {
  id                  String             @id
  age                 AgeBracket         @relation(fields: [ageBracketId], references: [id], onDelete: Cascade)
  ageBracketId        String
  gender              Gender             @relation(fields: [genderId], references: [id], onDelete: Cascade)
  genderId            String
  municipal           Municipals         @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId        Int
  barangay            Barangays          @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId         String
  survey              Survey             @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId            String
  Response            Response[]
  surveyResponse      SurveyResponse     @relation(fields: [surveyResponseId], references: [id], onDelete: Cascade)
  surveyResponseId    String
  ValidatedResponse   ValidatedResponse? @relation(fields: [validatedResponseId], references: [id])
  validatedResponseId String?
  media               MediaUrl?          @relation(fields: [mediaUrlId], references: [id])
  mediaUrlId          String?
  valid               Boolean            @default(true)
  usersUid            String?
  Users               Users?             @relation(fields: [usersUid], references: [uid])
  customeOption       CustomOption[]
}

model ValidatedResponse {
  id                 String               @id
  survey             Survey?              @relation(fields: [surveyId], references: [id])
  surveyId           String
  respondentResponse RespondentResponse[]
  surveyor           SurveyorNumber?      @relation(fields: [surveyorNumberId], references: [id])
  surveyorNumberId   String
  timestamp          DateTime             @default(now())
}

model Response {
  id                   String             @id
  survey               Survey             @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  queries              Queries            @relation(fields: [queryId], references: [id], onDelete: Cascade)
  queryId              String
  barangay             Barangays          @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId          String
  municipal            Municipals         @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  option               Option?             @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId             String?
  ageBracket           AgeBracket         @relation(fields: [ageBracketId], references: [id], onDelete: Cascade)
  ageBracketId         String
  gender               Gender             @relation(fields: [genderId], references: [id], onDelete: Cascade)
  genderId             String
  municipalsId         Int
  surveyId             String
  surveyResponse       SurveyResponse     @relation(fields: [surveyResponseId], references: [id], onDelete: Cascade)
  respondentResponse   RespondentResponse @relation(fields: [respondentResponseId], references: [id], onDelete: Cascade)
  respondentResponseId String
  surveyResponseId     String
  QueryAnswer          QueryAnswer[]
  customOption         CustomOption?       @relation(fields: [customOptionId], references: [id])
  customOptionId       String?
}

model QueryAnswer {
  id             String        @id
  query          Queries       @relation(fields: [queriesId], references: [id], onDelete: Cascade)
  queriesId      String
  customOption   CustomOption? @relation(fields: [customOptionId], references: [id])
  option         Option        @relation(fields: [optionId], references: [id], onDelete: Cascade)
  optionId       String
  response       Response      @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId     String
  customOptionId String?
}

model DeviceLogs {
  id           String    @id @default(cuid())
  release      String    @default("-/-")
  return       String    @default("-/-")
  user         Users     @relation(fields: [usersUid], references: [uid], onDelete: Cascade)
  usersUid     String
  condition    String    @default("New")
  handTo       AdminUser @relation(fields: [adminUserUid], references: [uid], onDelete: Cascade)
  adminUserUid String
  survey       Survey    @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId     String
}

model TeamRecordsLogs {
  id           String     @id @default(uuid())
  timstamp     DateTime   @default(now())
  value        Int?
  method       Int        @default(1)
  municipal    Municipals @relation(fields: [municipalsId], references: [id], onDelete: Cascade)
  municipalsId Int
  barnagay     Barangays  @relation(fields: [barangaysId], references: [id], onDelete: Cascade)
  barangaysId  String
  team         Team       @relation(fields: [teamId], references: [id])
  teamId       String
}

model TeamRecords {
  id        String    @id @default(uuid())
  activity  String
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  timestamp DateTime?
  teamId    String
  user      Users?    @relation(fields: [usersUid], references: [uid])
  usersUid  String?
}

model TeamDistributions {
  id        String    @id @default(uuid())
  activity  String
  timestamp DateTime?
  status    Int?      @default(0)
  team      Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  operator  Users?    @relation(fields: [usersUid], references: [uid])
  usersUid  String?
  witness   Witness[]
}

model Witness {
  id                  String             @id
  voter               Voters             @relation(fields: [votersId], references: [id], onDelete: Cascade)
  votersId            String             @unique
  timstamp            DateTime
  TeamDistributions   TeamDistributions? @relation(fields: [teamDistributionsId], references: [id])
  teamDistributionsId String?
}

model VoterRecords {
  id           String   @id @default(uuid())
  desc         String
  questionable Boolean  @default(true)
  timestamp    DateTime @default(now())
  voter        Voters?  @relation(fields: [votersId], references: [id], onDelete: Cascade)
  votersId     String?
  user         Users?   @relation(fields: [usersUid], references: [uid])
  usersUid     String?
}
